enum LMS_CourseLevel {
  Beginner
  Intermediate
  Advanced
}
type LMS_Course_Duration {
  hours: Int
  min: Int
}
#models
type LMS_KnowledgeDomain @model @searchable{
  id: ID!
  name: String!
  description: String
  subDomain: [LMS_KnowledgeDomain] @hasMany #we can create as many subdomains as we want
  courses: [LMS_Course] @hasMany(indexName: "coursesByDomain")
}
type LMS_CourseTags @model @searchable {
  id: ID!
  label: String!
  courses: [LMS_Course] @manyToMany(relationName: "CourseTags")
}

type LMS_Course @model @searchable {
  id: ID!
  domainId: ID! @index(name: "coursesByDomain")
  name: String!
  description: String!
  shortDescription: String!
  thumbnailImageURL: String
  thumbnailVideoURL: String
  price: Int @default(value: "0")
  currentlyEnrolled: [Student] @manyToMany(relationName: "enrolledInCourse")
  studentsWhoCompletedThisCourse: [Student]
    @manyToMany(relationName: "studentsWhoCompletedThisCourse")
  exStudentsOfThisCourse: [Student]
    @manyToMany(relationName: "exStudentsOfThisCourse")
  currentlyEnrolledStudentsCount: Int
  allStudentsCount: Int
  courseReviewsRatings: Int
  avgStars: Float
  tags: [LMS_CourseTags] @manyToMany(relationName: "CourseTags")
  duration: LMS_Course_Duration!
  chapters: [LMS_Course_Chapter] @hasMany(indexName: "chapterByCourse")
  language: String
  deadline: AWSDate!
  courseLevel: LMS_CourseLevel
  reviews: [LMS_Course_Review] @hasMany(indexName: "reviewsByCourse")
  courseCreators: [LMSCourseInstructor] @manyToMany(relationName: "coursesByCreators") #courses created by user
}

#Drip Scheduling
type LMS_Drip_Schedule @model {
  enableDripping: Boolean # Enabling the Dripping option
  dripType: DripType # Specify the data type for dripType
}

enum DripType {
  StudentEnrollmentDate #When Student enrolls in this course
  StudentCourseStart #When Student accesses the course for the first time
  On_A_specificDate #Select the date when this course will be release
}

type LMS_Course_Review @model {
  id: ID!
  rating: Int!
  content: String
  user: Student @hasOne
  courseId: ID! @index(name: "reviewsByCourse")
}
type LMS_Course_Chapter @model {
  id: ID!
  courseId: ID! @index(name: "chapterByCourse", sortKeyFields: ["title"])
  course: LMS_Course @belongsTo(fields: ["courseId"])
  title: String!
  description: String!
  videoUrl: String #if course creator no sections in chapters
  duration: Duration!
  visibility: Boolean
  previewLesson: Boolean #lesson will be available for preview without subscription
  quiz: [LMS_QuizQuestion] @hasMany(indexName: "MCQByQuiz")
  section: [LMS_Course_Section]
  attachments: String#links for pdf
  completedBy: [Student] @manyToMany(relationName: "chapterCompletedBy")
}

type LMS_Course_Section @model {
  title: String!
  description: String!
  duration: Duration
  videoUrl: String!
  attachments: String#links for pdf
}

#Admin, revenue partners & affiliates
type Admin {
  id: ID!
  email: String!
  name: String!
}

type Payee {
  id: ID!
  email: String!
  name: String!
}

type ChooseCourse {
  id: ID!
  selectCourses:[LMS_Course] @belongsTo(fields: ["courseId"])
  admins: [Admin] @hasMany(relationName: "courseAdmins")
  payees: [Payee] @hasMany(relationName: "coursePayees")
}

type Revenue {
  id: ID!
  courses: [LMS_Course] @hasMany(relationName: "RevenueCourses")
  payoutPercentage: Float!
  date: String!
}

type Affiliate {
  id: ID!
  email: String!
  name: String!
  courses: [LMS_Course] @hasMany(relationName: "affiliateCourses")
}

#pricing

type Pricing @model {
  primaryPricing: Boolean # Set the initial pricing option that will display on landing page
  pricingType: pricingType #specify the correct option
}

enum pricingType {
  Free #offer free contents to the subscribers
  OneTimePayment #Charges student a One time fee to access the content
  Subscription #Charge students recurring monthly feesfor access to the content
  MonthlyPaymentPlan #Split the full community price into several monthly payment
}
#set additional pricing option
type SetAdditionalPricingOption {
  id: ID!
  label: String
  price: Float!
}

#publish
enum CoursePublishStatus {
  DRAFT
  PRE_ORDER
  PUBLISHED
}
type Course {
  id: ID!
  name: [LMS_Course]!
  publishStatus: CoursePublishStatus!
}

#Chapter in course

type LearningContent {
  id: ID!
  courseId: ID! @index(name: "learningContentByCourse")
  course: [LMS_Course]! @belongsTo(fields: ["courseId"])
  type: LearningContentType!
}

type LearningContentType {
  VIDEO
  PDF
  TEXT
  AUDIO
  DOWNLOAD
  PRESENTATION
  MULTIMEDIA
  LIVE
}

type Assessment {
  id: ID!
  courseId: ID! @index(name: "assessmentByCourse")
  course: [LMS_Course]! @belongsTo(fields: ["courseId"])
  type: AssessmentType!
}

type AssessmentType {
  quiz: LMS_Quiz_Question
  survey: String
  Assignment: String
  Exam: String
}

type Course {
  id: ID!
  learningContents: [LearningContent] @hasMany(indexName: "learningContentByCourse")
  assessments: [Assessment] @hasMany(indexName: "assessmentByCourse")
}

type LessonSetting{
  id: ID!
  courseId: ID! @index(name: "lessonByCourse")
  course: [LMS_Course]! @belongsTo(fields: ["courseId"])
  isFreePreview: Boolean!
  isPrerequisite: Boolean!
  discussionEnabled: Boolean!
  isVideoDownloadable: Boolean!

}

type LMS_Quiz_Question @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  id: ID!
  ChapterID: ID @index(name: "MCQByExam")
  question: String
  imageUrl: String #question can also include image or question can be in the form of image
  points: Int
  options: [LMS_Quiz_Option]! @hasMany(indexName: "optionsByMCQ")#for single and multiple choice questions
}
type LMS_Quiz_Option @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [read] }
    ]
  )
{ #this fits for both multi-correct and single-correct quiz
  id: ID!
  questionid: ID! @index(name: "optionsByMCQ")
  key: Int #to separately identify the different options.
  image: String #if user contains image
  content: String!
  val: Boolean @default(value: "false") #default value should be in double quotes even for boolean:amplify-issue
}
type LMS_Quiz_Response @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  userId: ID!
  chapterId: ID
  chapter: [MCQResponses] @hasMany(indexName: "userChapterResponses", fields: ["userId", "chapterId"])
  totalScore: Int
}

type LMS_Question_Response @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
  {
  id: ID!
  userId: ID!
    @index(name: "useChapterResponses", sortKeyFields: ["chapterId"])
  chapterId: ID!
  questionId: ID!
  question: LMS_Quiz_Question @hasOne(fields: ["questionId"])
  response: [Int] #will only contain keys options where student marked true
}

#learner Management learner

type learnerManagement_Learner {
  name: String!
  email: String!
  mobile: Int!
  password: String!
  sendEmailToUser: Boolean @default(value: "false")
}

#user Management
type userManagement_admin @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  name: String!
  email: String!
  mobile: Int!
  password: String!
  sendEmailToUser: Boolean @default(value: "false")
  role: LearnerRole!
}

enum LearnerRole {
  SUPER_ADMIN #grant complete access
  SUB_ADMIN #limited access with customisable permission
}

type userManagement_Instruction @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  name: String!
  email: String!
  mobile: Int!
  password: String!
  assignedCourses: [LMS_Course]! @hasMany(indexName: "assignedCoursesByInstructor")
  #enter more details
  sendEmailToUser: Boolean @default(value: "false")
  #set Permission
  editingOfPublishedCourses: Boolean @default(value: "false")
  askForApprovalForPublishedCourses: Boolean @default(value: "false")
  accessOfLiveRecordings: Boolean @default(value: "false")
  accessToSalesDashboard: Boolean @default(value: "false")
  accessToMessenger: Boolean @default(value: "false")
  accessToBandwidthReport: Boolean @default(value: "false")
  accessToUsageReport: Boolean @default(value: "false")
  accessToLiveTestReport: Boolean @default(value: "false")
  accessToLiveClassReport: Boolean @default(value: "false")
  accessToLearnerDetails: Boolean @default(value: "false")
  accessToDownload_quiz_OR_liveTests: Boolean @default(value: "false")
  accessToEnrollLearnerToAnyCourse: Boolean @default(value: "false")

}

type userManagement_Affiliate @auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  name: String!
  email: String!
  mobile: Int!
  password: String!
  commisionRate_in_Percentage: Int
  allowCommisionOnAllCourses: Boolean @default(value: "false")
  course: [LMS_Course]! @belongsTo(fields: ["courseId"])#if true
  linkAffiliatesForLimitedDays: Boolean @default(value: "false")
  enterNumberOfDays: Int #if true
  sendEmailToUser: Boolean @default(value: "false")

}

type Lerner_profileDetails {
  name: String!
  email: String!
  mobile: Int!
  role: LearnerRoleSelect!
  state: SelectState!
  languange: SelectLanguage!

}
enum LearnerRoleSelect {
  STUDENT
  #ADD more if any
}

enum SelectLanguage{
  English
  Hindi
  Telugu
  #add or delete if any

}

enum SelectState{
  Andhra Pradesh
  Arunachal Pradesh
  Assam
  Bihar
  Chhattisgarh
  Goa
  Gujarat
  Haryana
  Himachal Pradesh
  Jharkhand
  Karnataka
  Kerala
  Maharashtra
  Madhya Pradesh
  Manipur
  Meghalaya
  Mizoram
  Nagaland
  Odisha
  Punjab
  Rajasthan
  Sikkim
  Tamil Nadu
  Tripura
  Telangana
  Uttar Pradesh
  Uttarakhand
  West Bengal
  Andaman_and_Nicobar_UT
  Chandigarh_UT
  Dadra_and_Nagar_Haveli_and_Daman_and_Diu_UT
  Delhi_National_Capital_Territory_NCT
  Jammu_and_Kashmir_UT
  Ladakh_UT
  Lakshadweep_UT
  Puducherry_UT
}

type Lerner_additionalDetails{
      chooseSegment: UserSegment!
      leadStatus: LeadStatus!

}

enum UserSegment{
  Free
  Trail
  Paid
  Returning
}

enum LeadStatus{
  Open
  Follow_Up
  Converted
  NotInterested
}

#change password

type changePassword{
  newPassword: String!
  reTypeNewPassword: String!
}

#enrolledCourses



type EnrolledCourse {
  id: ID!
  course: [LMS_Course]! 
  learner: Learner!
  joiningDate: Date!
  expiryDate: Date!
  status: EnrolledCourseStatus!
}

enum EnrolledCourseStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

input EnrolledCourseFilterInput {
  joiningDate: Date
  expiryDate: Date
  status: EnrolledCourseStatus
}

#purchase history

type PurchaseHistory {
  id: ID!
  date: String!
  orderId: String!
  txnId: String!
  items: [PurchaseItem]!
  amount: Float!
  status: PurchaseStatus!
}

type PurchaseItem {
  id: ID
  name: String
  quantity: Int
  price: Float
}

enum PurchaseStatus {
  PROCESSING
  SUCCESS
  FAILED
}

input PurchaseHistoryFilter {
  fromDate: String
  toDate: String
  orderId: String
  txnId: String
  amount: Float
  status: PurchaseStatus
}

#bundles of Course

type BundleOfCourse {
  CourseId: ID
  title: String
  status: BundleStatus
  isFree: Boolean
  publishedDate: String
}

enum BundleStatus {
  UNPUBLISHED
  PUBLISHED
  COMING_SOON
  SCHEDULED
}

input BundleSearchInput {
  searchByTitle: String
  statusTag: BundleStatus
  isFreeTag: Boolean
  publishedDateTag: Date
}

#bundle of test

type BundleOfTest {
  CourseId: ID
  title: String
  status: BundleStatus
  isFree: Boolean
  publishedDate: String
}



input BundleSearchInput {
  searchByTitle: String
  statusTag: BundleStatus
  isFreeTag: Boolean
}

#Basic setting of bundle

type basicSetting{
  bundleName: String!
  bundleShortDescription: String
  bundleDescription: String
  bundleImageUrl: String
}

#pricing and validity

type Bundle {
  sellingType: BundleSellingType!
  pricing: BundlePricing!
  validity: BundleValidity!
}

type BundlePricing {
  bundlePrice: Float!
  discountedPrice: Float
}

type BundleValidity {
  validityDays: Int!
  expiryDays: Int
}

enum BundleSellingType {
  MakeThisFreeBundle
  MakeThisPaidBundle
}

input BundlePricingInput {
  bundlePrice: Float!
  discountedPrice: Float
}

input BundleValidityInput {
  validityDays: Int!
  expiryDays: Int
}

#publish bundle
enum BundleStatusOfCourse {
  LIVE
  UNPUBLISHED
  SCHEDULED
}

input PublishInput {
  
  status: BundleStatusOfCourse!
  releasedDate: Date #If scheduled is selected
}

#add products
type Product {
  id: ID!
  title: String!
  courseID: ID!
  price: Int!
  status: BundleStatusOfCourse
  type: String!
}

type BundleOfAddProduct {
selectedProductCount: Int!
}
input AddProductInput {
  id: ID
  title: String
  courseID: ID
  status: BundleStatusOfCourse
  type: String
  isFree: Boolean
}


#manage order
type ManageOrder {
  id: ID!
  courses: [LMS_Course] @manyToMany(relationName: "ManageOrderTag")
}

#manage user

type User {
  id: ID!
  name: String!
  email: String!
  mobileNumber: String  
  joiningDate: String
  lastLoginDate: String
  membershipStatus: MembershipStatus
  learnerCount: Int
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
}

type ManageUser {
  users: [User!]!
}

input UserFilterInput {
  name: String
  email: String
  mobileNumber: String
  joiningDateTag: Date
  lastLoginDateTag: Date
  Enabled: Boolean @default(value: "false")
  learnerCount: Int
}

#categories

type categories {
  id: ID!
  name: String!
  url: String!
}

input categoriesInput {
  name: String!
  url: String!
}

#Edit category
type EditCategory {
  id: ID!
  name: String!
  url: String!
  categoryImage: String!
}

input EditCategoryInput {
  name: String!
  url: String!
  categoryImage: String!
}

#manage products in this category

type manageCategory {
  id: ID!
  category: [categories!]!
  delete: boolean @default(value: "false")
}

#asset Management

type Asset {
  id: ID!
  name: String!
  type: AssetType!
  url: String!
  size: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  folders: [Folder!]!
  tags: [String!]!
}

enum AssetType {
  IMAGE
  VIDEO
  DOCUMENT
}

type Folder {
  id: ID!
  name: String!
  lastEdit: DateTime!
  size: Int!
  members: [UserOfMembers!]!
}

type UserOfMembers {
  id: ID!
  name: String!
  email: String!
}

type AssetManagement {
  recentAssets: [Asset!]!
  pinnedAssets: [Asset!]!
  dribbleShots: [Asset!]!
  designAssets: [Asset!]!
  portfolio: [Asset!]!
  behanceFiles: [Asset!]!
  backupFiles: [Asset!]!
  folders: [Folder!]!
  tags: [String!]!
}
